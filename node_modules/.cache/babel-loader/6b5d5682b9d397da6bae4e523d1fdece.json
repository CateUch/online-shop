{"ast":null,"code":"import { configureStore, createSlice } from '@reduxjs/toolkit';\n// export type initialCartStateType = typeof initialCartState;\nconst initialCartState = {\n  cart: {\n    items: [],\n    totalQuantity: 0\n  },\n  showCart: false\n};\nexport const cartSlice = createSlice({\n  name: 'cart',\n  initialState: initialCartState,\n  reducers: {\n    toggleShowCart(state) {\n      if (state.cart.items.length > 0) state.showCart = !state.showCart;\n    } //         increment(state, action) {\n    //             const updatedTotalAmount =\n    //       state.cart.totalAmount + action.item.price * action.amount;\n    //     const existingCartItemIndex = state.items.findIndex(\n    //       (item) => item.id === action.item.id\n    //     );\n    //     const existingCartItem = state.items[existingCartItemIndex];\n    //     let updatedItems;\n    //     if (existingCartItem) {\n    //       const updatedItem = {\n    //         ...existingCartItem,\n    //         amount: existingCartItem.amount + action.item.amount,\n    //       };\n    //       updatedItems = [...state.items];\n    //       updatedItems[existingCartItemIndex] = updatedItem;\n    //     } else {\n    //       updatedItems = state.items.concat(action.payload.item);\n    //     }\n    //     return {\n    //       items: updatedItems,\n    //       totalAmount: updatedTotalAmount,\n    //     };\n    //   }\n    //         },\n    //         // decrement() {\n    //         //     const existingCartItemIndex = state.items.findIndex(\n    //         //         (item) => item.id === action.id\n    //         //       );\n    //         //       const existingItem = state.items[existingCartItemIndex];\n    //         //       const updatedTotalAmount = state.totalAmount - existingItem.price;\n    //         //       let updatedItems;\n    //         //       if (existingItem.amount === 1) {\n    //         //         updatedItems = state.items.filter(item => item.id !== action.payload.id);\n    //         //       } else {\n    //         //         const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\n    //         //         updatedItems = [...state.items];\n    //         //         updatedItems[existingCartItemIndex] = updatedItem;\n    //         //       }\n    //         //       return {\n    //         //         items: updatedItems,\n    //         //         totalAmount: updatedTotalAmount\n    //         //       };\n    //         //     }\n    //         // }\n    //         // remove()\n\n\n  }\n});\nconst store = configureStore({\n  reducer: cartSlice.reducer\n});\nexport const cartActions = cartSlice.actions;\nexport default store; //types\n// declare module 'react-redux' {\n//     interface DefaultRootState extends CartStateType {}\n// }","map":{"version":3,"sources":["C:/Users/Uch/React/udemy course/online-shop-cart/src/store/cartStore.tsx"],"names":["configureStore","createSlice","initialCartState","cart","items","totalQuantity","showCart","cartSlice","name","initialState","reducers","toggleShowCart","state","length","store","reducer","cartActions","actions"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,WAAzB,QAA4C,kBAA5C;AAIA;AACA,MAAMC,gBAAgB,GAAG;AACtBC,EAAAA,IAAI,EAAE;AACLC,IAAAA,KAAK,EAAE,EADF;AAELC,IAAAA,aAAa,EAAE;AAFV,GADgB;AAKtBC,EAAAA,QAAQ,EAAE;AALY,CAAzB;AAQA,OAAO,MAAMC,SAAS,GAAGN,WAAW,CAAE;AAClCO,EAAAA,IAAI,EAAC,MAD6B;AAElCC,EAAAA,YAAY,EAAEP,gBAFoB;AAGlCQ,EAAAA,QAAQ,EAAE;AACNC,IAAAA,cAAc,CAACC,KAAD,EAAQ;AAClB,UAAIA,KAAK,CAACT,IAAN,CAAWC,KAAX,CAAiBS,MAAjB,GAA0B,CAA9B,EACAD,KAAK,CAACN,QAAN,GAAiB,CAACM,KAAK,CAACN,QAAxB;AACH,KAJK,CAKd;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AArDc;AAHwB,CAAF,CAA7B;AA4DP,MAAMQ,KAAK,GAAGd,cAAc,CAAC;AACzBe,EAAAA,OAAO,EAAER,SAAS,CAACQ;AADM,CAAD,CAA5B;AAIA,OAAO,MAAMC,WAAW,GAAGT,SAAS,CAACU,OAA9B;AAEP,eAAeH,KAAf,C,CAGA;AAoBA;AACA;AACA","sourcesContent":["import { configureStore, createSlice } from '@reduxjs/toolkit';\r\nimport {v1} from 'uuid';\r\n\r\n\r\n// export type initialCartStateType = typeof initialCartState;\r\nconst initialCartState = {\r\n   cart: {\r\n    items: [],\r\n    totalQuantity: 0\r\n   },\r\n   showCart: false\r\n  };\r\n\r\nexport const cartSlice = createSlice ({\r\n    name:'cart',\r\n    initialState: initialCartState,\r\n    reducers: {\r\n        toggleShowCart(state) {\r\n            if (state.cart.items.length > 0)\r\n            state.showCart = !state.showCart\r\n        },\r\n//         increment(state, action) {\r\n//             const updatedTotalAmount =\r\n//       state.cart.totalAmount + action.item.price * action.amount;\r\n\r\n//     const existingCartItemIndex = state.items.findIndex(\r\n//       (item) => item.id === action.item.id\r\n//     );\r\n//     const existingCartItem = state.items[existingCartItemIndex];\r\n//     let updatedItems;\r\n\r\n//     if (existingCartItem) {\r\n//       const updatedItem = {\r\n//         ...existingCartItem,\r\n//         amount: existingCartItem.amount + action.item.amount,\r\n//       };\r\n//       updatedItems = [...state.items];\r\n//       updatedItems[existingCartItemIndex] = updatedItem;\r\n//     } else {\r\n//       updatedItems = state.items.concat(action.payload.item);\r\n//     }\r\n\r\n//     return {\r\n//       items: updatedItems,\r\n//       totalAmount: updatedTotalAmount,\r\n//     };\r\n//   }\r\n//         },\r\n//         // decrement() {\r\n//         //     const existingCartItemIndex = state.items.findIndex(\r\n//         //         (item) => item.id === action.id\r\n//         //       );\r\n//         //       const existingItem = state.items[existingCartItemIndex];\r\n//         //       const updatedTotalAmount = state.totalAmount - existingItem.price;\r\n//         //       let updatedItems;\r\n//         //       if (existingItem.amount === 1) {\r\n//         //         updatedItems = state.items.filter(item => item.id !== action.payload.id);\r\n//         //       } else {\r\n//         //         const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\r\n//         //         updatedItems = [...state.items];\r\n//         //         updatedItems[existingCartItemIndex] = updatedItem;\r\n//         //       }\r\n\r\n//         //       return {\r\n//         //         items: updatedItems,\r\n//         //         totalAmount: updatedTotalAmount\r\n//         //       };\r\n//         //     }\r\n//         // }\r\n//         // remove()\r\n     }\r\n})\r\n\r\nconst store = configureStore({\r\n    reducer: cartSlice.reducer\r\n});\r\n\r\nexport const cartActions = cartSlice.actions;\r\n\r\nexport default store;\r\n\r\n\r\n//types\r\ntype CartStateType = typeof initialCartState;\r\n\r\nexport type initialCartStateType = {\r\n    cart: {\r\n        items: ItemStateType[] ,\r\n    totalQuantity: number\r\n   },\r\n   showCart: boolean\r\n    }\r\n\r\n\r\ntype ItemStateType = {\r\n    id: string,\r\n              title: string,\r\n              price: number,\r\n              quantity: number,\r\n              totalPrice: number,\r\n}\r\n\r\n// declare module 'react-redux' {\r\n//     interface DefaultRootState extends CartStateType {}\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}