{"ast":null,"code":"import { configureStore, createSlice } from '@reduxjs/toolkit';\nimport initialShopState from '.';\nconst initialState = {\n  products: initialShopState,\n  cart: {\n    items: [],\n    totalQuantity: 0\n  },\n  showCart: false\n};\nexport const shopSlice = createSlice({\n  name: 'shop',\n  initialState: initialState,\n  reducers: {\n    toggleShowCart(state) {\n      if (state.cart.items.length > 0) {\n        state.showCart = !state.showCart;\n      }\n    } // addItemToCart\n    //         increment(state, action) {\n    //             const updatedTotalAmount =\n    //       state.cart.totalAmount + action.item.price * action.amount;\n    //     const existingCartItemIndex = state.items.findIndex(\n    //       (item) => item.id === action.item.id\n    //     );\n    //     const existingCartItem = state.items[existingCartItemIndex];\n    //     let updatedItems;\n    //     if (existingCartItem) {\n    //       const updatedItem = {\n    //         ...existingCartItem,\n    //         amount: existingCartItem.amount + action.item.amount,\n    //       };\n    //       updatedItems = [...state.items];\n    //       updatedItems[existingCartItemIndex] = updatedItem;\n    //     } else {\n    //       updatedItems = state.items.concat(action.payload.item);\n    //     }\n    //     return {\n    //       items: updatedItems,\n    //       totalAmount: updatedTotalAmount,\n    //     };\n    //   }\n    //         },\n    //         // decrement() {\n    //         //     const existingCartItemIndex = state.items.findIndex(\n    //         //         (item) => item.id === action.id\n    //         //       );\n    //         //       const existingItem = state.items[existingCartItemIndex];\n    //         //       const updatedTotalAmount = state.totalAmount - existingItem.price;\n    //         //       let updatedItems;\n    //         //       if (existingItem.amount === 1) {\n    //         //         updatedItems = state.items.filter(item => item.id !== action.payload.id);\n    //         //       } else {\n    //         //         const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\n    //         //         updatedItems = [...state.items];\n    //         //         updatedItems[existingCartItemIndex] = updatedItem;\n    //         //       }\n    //         //       return {\n    //         //         items: updatedItems,\n    //         //         totalAmount: updatedTotalAmount\n    //         //       };\n    //         //     }\n    //         // }\n    //         // remove()\n\n\n  }\n});\nconst store = configureStore({\n  reducer: shopSlice.reducer\n});\nexport const cartActions = shopSlice.actions;\nexport default store; //types\n\n//@ts-ignore\nwindow.store = store;","map":{"version":3,"sources":["C:/Users/Uch/React/udemy course/online-shop-cart/src/store/cartStore.tsx"],"names":["configureStore","createSlice","initialShopState","initialState","products","cart","items","totalQuantity","showCart","shopSlice","name","reducers","toggleShowCart","state","length","store","reducer","cartActions","actions","window"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,WAAzB,QAA4C,kBAA5C;AAEA,OAAOC,gBAAP,MAA6B,GAA7B;AAGA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAEF,gBADO;AAEjBG,EAAAA,IAAI,EAAE;AACFC,IAAAA,KAAK,EAAE,EADL;AAEFC,IAAAA,aAAa,EAAE;AAFb,GAFW;AAMjBC,EAAAA,QAAQ,EAAE;AANO,CAArB;AASA,OAAO,MAAMC,SAAS,GAAGR,WAAW,CAAC;AACjCS,EAAAA,IAAI,EAAE,MAD2B;AAEjCP,EAAAA,YAAY,EAAEA,YAFmB;AAGjCQ,EAAAA,QAAQ,EAAE;AACNC,IAAAA,cAAc,CAACC,KAAD,EAAQ;AAClB,UAAIA,KAAK,CAACR,IAAN,CAAWC,KAAX,CAAiBQ,MAAjB,GAA0B,CAA9B,EAAiC;AAC7BD,QAAAA,KAAK,CAACL,QAAN,GAAiB,CAACK,KAAK,CAACL,QAAxB;AACH;AACJ,KALK,CAMN;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAvDM;AAHuB,CAAD,CAA7B;AA8DP,MAAMO,KAAK,GAAGf,cAAc,CAAC;AACzBgB,EAAAA,OAAO,EAAEP,SAAS,CAACO;AADM,CAAD,CAA5B;AAIA,OAAO,MAAMC,WAAW,GAAGR,SAAS,CAACS,OAA9B;AAMP,eAAeH,KAAf,C,CAGA;;AA4BA;AACAI,MAAM,CAACJ,KAAP,GAAeA,KAAf","sourcesContent":["import { configureStore, createSlice } from '@reduxjs/toolkit';\r\nimport { v1 } from 'uuid';\r\nimport initialShopState from '.';\r\n\r\n\r\nconst initialState = {\r\n    products: initialShopState,\r\n    cart: {\r\n        items: [],\r\n        totalQuantity: 0\r\n    },\r\n    showCart: false\r\n};\r\n\r\nexport const shopSlice = createSlice({\r\n    name: 'shop',\r\n    initialState: initialState,\r\n    reducers: {\r\n        toggleShowCart(state) {\r\n            if (state.cart.items.length > 0) {\r\n                state.showCart = !state.showCart\r\n            }\r\n        },\r\n        // addItemToCart\r\n        //         increment(state, action) {\r\n        //             const updatedTotalAmount =\r\n        //       state.cart.totalAmount + action.item.price * action.amount;\r\n\r\n        //     const existingCartItemIndex = state.items.findIndex(\r\n        //       (item) => item.id === action.item.id\r\n        //     );\r\n        //     const existingCartItem = state.items[existingCartItemIndex];\r\n        //     let updatedItems;\r\n\r\n        //     if (existingCartItem) {\r\n        //       const updatedItem = {\r\n        //         ...existingCartItem,\r\n        //         amount: existingCartItem.amount + action.item.amount,\r\n        //       };\r\n        //       updatedItems = [...state.items];\r\n        //       updatedItems[existingCartItemIndex] = updatedItem;\r\n        //     } else {\r\n        //       updatedItems = state.items.concat(action.payload.item);\r\n        //     }\r\n\r\n        //     return {\r\n        //       items: updatedItems,\r\n        //       totalAmount: updatedTotalAmount,\r\n        //     };\r\n        //   }\r\n        //         },\r\n        //         // decrement() {\r\n        //         //     const existingCartItemIndex = state.items.findIndex(\r\n        //         //         (item) => item.id === action.id\r\n        //         //       );\r\n        //         //       const existingItem = state.items[existingCartItemIndex];\r\n        //         //       const updatedTotalAmount = state.totalAmount - existingItem.price;\r\n        //         //       let updatedItems;\r\n        //         //       if (existingItem.amount === 1) {\r\n        //         //         updatedItems = state.items.filter(item => item.id !== action.payload.id);\r\n        //         //       } else {\r\n        //         //         const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\r\n        //         //         updatedItems = [...state.items];\r\n        //         //         updatedItems[existingCartItemIndex] = updatedItem;\r\n        //         //       }\r\n\r\n        //         //       return {\r\n        //         //         items: updatedItems,\r\n        //         //         totalAmount: updatedTotalAmount\r\n        //         //       };\r\n        //         //     }\r\n        //         // }\r\n        //         // remove()\r\n    }\r\n})\r\n\r\nconst store = configureStore({\r\n    reducer: shopSlice.reducer\r\n});\r\n\r\nexport const cartActions = shopSlice.actions;\r\n\r\ndeclare module 'react-redux' {\r\n    interface DefaultRootState extends initialShopStateType { }\r\n}\r\n\r\nexport default store;\r\n\r\n\r\n//types\r\nexport type ShopStateType = typeof initialState;\r\n\r\nexport type initialShopStateType = {\r\n    products: StateItemType[],\r\n    cart: {\r\n        items: CartItemType[],\r\n        totalQuantity: number\r\n    },\r\n    showCart: boolean\r\n}\r\n\r\n\r\ntype CartItemType = {\r\n    id: string,\r\n    title: string,\r\n    price: number,\r\n    quantity: number,\r\n    totalPrice: number,\r\n}\r\ntype StateItemType = {\r\n    id: string,\r\n    title: string,\r\n    price: number,\r\n    description: string,\r\n}\r\n\r\n\r\n//@ts-ignore\r\nwindow.store = store;\r\n\r\n"]},"metadata":{},"sourceType":"module"}