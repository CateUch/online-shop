{"ast":null,"code":"import { configureStore, createSlice } from '@reduxjs/toolkit';\nconst initialCartState = {\n  cart: {\n    items: [],\n    totalAmount: 0\n  }\n};\nexport const cartSlice = createSlice({\n  name: 'cart',\n  initialState: initialCartState,\n  reducers: {// increment(state, action) {\n    //             const updatedTotalAmount =\n    //       state.totalAmount + action.item.price * action.amount;\n    //     const existingCartItemIndex = state.items.findIndex(\n    //       (item) => item.id === action.item.id\n    //     );\n    //     const existingCartItem = state.items[existingCartItemIndex];\n    //     let updatedItems;\n    //     if (existingCartItem) {\n    //       const updatedItem = {\n    //         ...existingCartItem,\n    //         amount: existingCartItem.amount + action.item.amount,\n    //       };\n    //       updatedItems = [...state.items];\n    //       updatedItems[existingCartItemIndex] = updatedItem;\n    //     } else {\n    //       updatedItems = state.items.concat(action.payload.item);\n    //     }\n    //     return {\n    //       items: updatedItems,\n    //       totalAmount: updatedTotalAmount,\n    //     };\n    //   }\n    //},\n    // decrement() {\n    //     const existingCartItemIndex = state.items.findIndex(\n    //         (item) => item.id === action.id\n    //       );\n    //       const existingItem = state.items[existingCartItemIndex];\n    //       const updatedTotalAmount = state.totalAmount - existingItem.price;\n    //       let updatedItems;\n    //       if (existingItem.amount === 1) {\n    //         updatedItems = state.items.filter(item => item.id !== action.payload.id);\n    //       } else {\n    //         const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\n    //         updatedItems = [...state.items];\n    //         updatedItems[existingCartItemIndex] = updatedItem;\n    //       }\n    //       return {\n    //         items: updatedItems,\n    //         totalAmount: updatedTotalAmount\n    //       };\n    //     }\n    // }\n    // remove()\n  }\n});\nconst store = configureStore({\n  reducer: cartSlice.reducer\n});\nexport const cartActions = cartSlice.actions;\nexport default store; //types","map":{"version":3,"sources":["C:/Users/Uch/React/udemy course/online-shop-cart/src/store/cartStore.tsx"],"names":["configureStore","createSlice","initialCartState","cart","items","totalAmount","cartSlice","name","initialState","reducers","store","reducer","cartActions","actions"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,WAAzB,QAA4C,kBAA5C;AAKA,MAAMC,gBAAgB,GAAG;AACtBC,EAAAA,IAAI,EAAE;AACLC,IAAAA,KAAK,EAAE,EADF;AAELC,IAAAA,WAAW,EAAE;AAFR;AADgB,CAAzB;AAOA,OAAO,MAAMC,SAAS,GAAGL,WAAW,CAAE;AAClCM,EAAAA,IAAI,EAAC,MAD6B;AAElCC,EAAAA,YAAY,EAAEN,gBAFoB;AAGlCO,EAAAA,QAAQ,EAAE,CACN;AACR;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACQ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAjDM;AAHwB,CAAF,CAA7B;AAwDP,MAAMC,KAAK,GAAGV,cAAc,CAAC;AACzBW,EAAAA,OAAO,EAAEL,SAAS,CAACK;AADM,CAAD,CAA5B;AAOA,OAAO,MAAMC,WAAW,GAAGN,SAAS,CAACO,OAA9B;AAEP,eAAeH,KAAf,C,CAGA","sourcesContent":["import { configureStore, createSlice } from '@reduxjs/toolkit';\r\nimport {v1} from 'uuid';\r\n\r\n\r\nexport type initialCartStateType = typeof initialCartState;\r\nconst initialCartState = {\r\n   cart: {\r\n    items: [],\r\n    totalAmount: 0,\r\n   }\r\n  };\r\n\r\nexport const cartSlice = createSlice ({\r\n    name:'cart',\r\n    initialState: initialCartState,\r\n    reducers: {\r\n        // increment(state, action) {\r\n//             const updatedTotalAmount =\r\n//       state.totalAmount + action.item.price * action.amount;\r\n\r\n//     const existingCartItemIndex = state.items.findIndex(\r\n//       (item) => item.id === action.item.id\r\n//     );\r\n//     const existingCartItem = state.items[existingCartItemIndex];\r\n//     let updatedItems;\r\n\r\n//     if (existingCartItem) {\r\n//       const updatedItem = {\r\n//         ...existingCartItem,\r\n//         amount: existingCartItem.amount + action.item.amount,\r\n//       };\r\n//       updatedItems = [...state.items];\r\n//       updatedItems[existingCartItemIndex] = updatedItem;\r\n//     } else {\r\n//       updatedItems = state.items.concat(action.payload.item);\r\n//     }\r\n\r\n//     return {\r\n//       items: updatedItems,\r\n//       totalAmount: updatedTotalAmount,\r\n//     };\r\n//   }\r\n        //},\r\n        // decrement() {\r\n        //     const existingCartItemIndex = state.items.findIndex(\r\n        //         (item) => item.id === action.id\r\n        //       );\r\n        //       const existingItem = state.items[existingCartItemIndex];\r\n        //       const updatedTotalAmount = state.totalAmount - existingItem.price;\r\n        //       let updatedItems;\r\n        //       if (existingItem.amount === 1) {\r\n        //         updatedItems = state.items.filter(item => item.id !== action.payload.id);\r\n        //       } else {\r\n        //         const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\r\n        //         updatedItems = [...state.items];\r\n        //         updatedItems[existingCartItemIndex] = updatedItem;\r\n        //       }\r\n\r\n        //       return {\r\n        //         items: updatedItems,\r\n        //         totalAmount: updatedTotalAmount\r\n        //       };\r\n        //     }\r\n        // }\r\n        // remove()\r\n    }\r\n})\r\n\r\nconst store = configureStore({\r\n    reducer: cartSlice.reducer\r\n});\r\ndeclare module 'react-redux' {\r\n    interface DefaultRootState extends CartStateType {}\r\n}\r\n\r\nexport const cartActions = cartSlice.actions;\r\n\r\nexport default store;\r\n\r\n\r\n//types\r\ntype CartStateType = typeof initialCartState;"]},"metadata":{},"sourceType":"module"}